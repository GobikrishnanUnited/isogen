{"version":3,"sources":["layouts/breadcrumbs/BreadCrumbs.js","components/Message.js","components/CreationModification.js","components/ComponentCard.js","components/Customer/ContactLink.js","views/EditData/CompanyEdit.js","constants/creationdatetime.js","components/ComponentCardV2.js","../node_modules/react-feather/dist/icons/edit-2.js"],"names":["BreadCrumbs","prop","location","useLocation","firstUrl","pathname","split","secondUrl","heading","to","tag","Link","className","active","message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","CreationModification","details","title","style","fontSize","created_by","creation_date","modified_by","modification_date","ComponentCard","children","subtitle","creationModificationDate","ContactLink","addContactToggleTeam","addContactModalTeam","id","setEditTeamEditModal","teamById","getTeamById","setContactDataTeam","useState","selectedContact","setSelectedContact","contacts","setContacts","useEffect","api","get","then","res","data","catch","md","color","onClick","bind","size","isOpen","toggle","backgroundColor","onChange","e","target","value","map","contact_id","name","console","log","updatedTeam","company_id","post","insertTeamMember","element","index","CompanyEdit","contentDetails","setContentDetails","allcountries","setAllCountries","useParams","navigate","useNavigate","setTeamById","setAddContactModalTeam","setSalesReport","setCompany","userSearchData","setUserSearchData","page","numberOfEmployeesVistited","displayEmployees","slice","columns","Math","ceil","length","selector","grow","wrap","width","cell","button","sortable","activeTab","setActiveTab","tab","handleInputs","editContentData","creationdatetime","ComponentCardV2","setTimeout","company_code","disabled","company_name","phone","email","address_street","address_state","address_country","defaultValue","country","country_code","tabs","tabId","gap_report_id","correct_count","result","review_status","moment","format","pStyle","textAlign","marginRight","oStyle","outline","border","_extends","Object","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Edit2","forwardRef","_ref","ref","_ref$color","_ref$size","rest","React","createElement","xmlns","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","propTypes","PropTypes","string","oneOfType","number","displayName"],"mappings":"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","file":"static/js/70.0690ada4.chunk.js","sourcesContent":["import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { useLocation, Link } from 'react-router-dom';\r\n//import SidebarData from '../sidebars/sidebardata/SidebarData';\r\n\r\nconst BreadCrumbs = (prop) => {\r\n  const location = useLocation();\r\n  const firstUrl = location.pathname.split('/')[1];\r\n  const secondUrl = location.pathname.split('/')[2];\r\n  \r\n  return (\r\n    <>\r\n      {/* <h4 className=\"text-capitalize\">{secondUrl ? `${secondUrl}` : `${firstUrl}`}</h4> */}\r\n      <h4>{prop.heading}</h4>\r\n      <Breadcrumb>\r\n        <BreadcrumbItem to=\"/\" tag={Link} className=\"text-decoration-none\">\r\n          Home\r\n        </BreadcrumbItem>\r\n        {firstUrl ? <BreadcrumbItem active>{firstUrl}</BreadcrumbItem> : ''}\r\n        {secondUrl ? <BreadcrumbItem active>{secondUrl}</BreadcrumbItem> : ''}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadCrumbs;\r\n","import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n","import React from 'react';\r\nimport { CardTitle, Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function CreationModification({ details = null, title }) {\r\n  CreationModification.propTypes = {\r\n    details: PropTypes.object,\r\n    title: PropTypes.string,\r\n  };\r\n  return (\r\n    <>\r\n      <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        <Row>\r\n          <Col>{title}</Col>\r\n          {details && (\r\n            <Col>\r\n              <Row>\r\n              <span style={{ fontSize: '0.7em' }}> Creation: {details && details.created_by} {details && details.creation_date}</span>\r\n              </Row>\r\n              <Row className=\"d-flex\">\r\n              <span style={{ fontSize: '0.7em' }}> Modified: {details && details.modified_by} {details && details.modification_date}</span>\r\n              </Row>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </CardTitle>\r\n    </>\r\n   );\r\n}","import { Card, CardBody, CardSubtitle } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport CreationModification from './CreationModification';\r\n\r\nconst ComponentCard = ({ children, title, subtitle,creationModificationDate }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CreationModification details={creationModificationDate} title={title}></CreationModification>\r\n      {/* <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        {title}\r\n        <p tag='h2' className=\"float-end small fs-5\">{righttitle}</p>\r\n      </CardTitle> */}\r\n      <CardBody className=\"p-4\">\r\n        <CardSubtitle className=\"text-muted mb-3\">{subtitle || ''}</CardSubtitle>\r\n        <div>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCard.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.node,\r\n  creationModificationDate:PropTypes.any\r\n};\r\n\r\nexport default ComponentCard;\r\n","/*eslint-disable*/\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Row,\r\n  Form,\r\n  ModalFooter,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Card,\r\n  Table,\r\n  Label,\r\n  Input,\r\n  Col,\r\n  FormGroup,\r\n  Button,\r\n  CardBody,\r\n} from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport * as Icon from 'react-feather';\r\nimport message from '../Message'\r\nimport api from '../../constants/api'; // Import your API library or use a fetch/axios/etc.\r\n\r\n\r\nexport default function ContactLink({\r\n  addContactToggleTeam,\r\n  addContactModalTeam,\r\n  setEditTeamEditModal,\r\n  id,\r\n  teamById,\r\n  setContactDataTeam,\r\n  getTeamById,\r\n}) {\r\n    ContactLink.propTypes = {\r\n    addContactToggleTeam: PropTypes.func,\r\n    setEditTeamEditModal: PropTypes.func,\r\n    addContactModalTeam: PropTypes.bool,\r\n    id: PropTypes.any,\r\n    teamById: PropTypes.array, // Assuming teamById is an array\r\n    setContactDataTeam: PropTypes.func,\r\n    getTeamById: PropTypes.func,\r\n  };\r\n\r\n  const [selectedContact, setSelectedContact] = useState();\r\n  const [contacts, setContacts] = useState([]);\r\n\r\n  // Function to fetch team titles\r\n  const getTeamTitles = () => {\r\n    api\r\n      .get('/contact/getContactwithoutCompany')\r\n      .then((res) => {\r\n        setContacts(res.data.data); \r\n      })\r\n      .catch(() => {\r\n        message('Team titles not found', 'info');\r\n      });\r\n  };\r\n\r\n  /// Insert or update team member\r\nconst insertTeamMember = () => {\r\n  // Check if a team title is selected\r\n  if (!selectedContact) {\r\n    message('Please select a team title', 'danger');\r\n    return;\r\n  }\r\nconsole.log('selectedContact',selectedContact);\r\n  // Check if a project ID is available\r\n  if (!id) {\r\n    message('Company ID not available', 'error');\r\n    return;\r\n  }\r\n\r\n  // Find the team with the selected team title\r\n  // const existingTeam = contacts.find((team) => team.contact_id === selectedContact);\r\n\r\n  // if (!existingTeam) {\r\n  //   message('Selected team title not found', 'danger');\r\n  //   return;\r\n  // }\r\n\r\n  // Update the project ID for the existing team\r\n  const updatedTeam = {\r\n    contact_id:selectedContact,\r\n    company_id: id,\r\n  };\r\n\r\n  api\r\n    .post(`/contact/editContactCompany`, updatedTeam)\r\n    .then(() => {\r\n      message('Contact updated successfully.', 'success');\r\n      // setTimeout(()=>{\r\n      //   window.location.reload();\r\n      // },500)\r\n      getTeamById(); // Assuming this function retrieves updated team data\r\n    })\r\n    .catch(() => {\r\n      message('Network connection error.', 'error');\r\n    });\r\n};\r\nuseEffect(() => {\r\n  getTeamTitles();\r\n\r\n }, [id]);\r\n\r\n  return (\r\n    <Form>\r\n      <Row>\r\n        <Col md=\"3\">\r\n          <FormGroup>\r\n            <Button\r\n              color=\"primary\"\r\n              className=\"shadow-none\"\r\n              onClick={addContactToggleTeam.bind(null)}\r\n            >\r\n              Add New\r\n            </Button>\r\n            <Modal\r\n              size=\"lg\"\r\n              isOpen={addContactModalTeam}\r\n              toggle={addContactToggleTeam.bind(null)}\r\n            >\r\n              <ModalHeader  style={{ backgroundColor: ' #0096FF', color: 'white' }} toggle={addContactToggleTeam.bind(null)}>\r\n                New Contact\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <Row>\r\n                  <Col md=\"12\">\r\n                    <Card>\r\n                      <CardBody>\r\n                        <Form>\r\n                        <Row>\r\n                            <Col md=\"4\">\r\n                              <FormGroup>\r\n                                <Label>Select Contact</Label>\r\n                                <Input\r\n                                  type=\"select\"\r\n                                  onChange={(e) => {\r\n                                    setSelectedContact(e.target.value);\r\n                                  }}\r\n                                  value={selectedContact}\r\n                                >\r\n                                  <option value=\"\">Please Select</option>\r\n                                  {contacts &&\r\n                                    contacts.map((e) => {\r\n                                      return (\r\n                                        <option\r\n                                          key={e.contact_id}\r\n                                          value={e.contact_id}\r\n                                        >\r\n                                          {e.name}\r\n                                        </option>\r\n                                      );\r\n                                    })}\r\n                                </Input>\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                        </Form>\r\n                      </CardBody>\r\n                    </Card>\r\n                  </Col>\r\n                </Row>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button\r\n                  className=\"shadow-none\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    insertTeamMember();\r\n                  }}\r\n                >\r\n                  Submit\r\n                </Button>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  className=\"shadow-none\"\r\n                  onClick={addContactToggleTeam.bind(null)}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </ModalFooter>\r\n            </Modal>\r\n          </FormGroup>\r\n        </Col>\r\n      </Row>\r\n      <Table id=\"example\" className=\"display border border-secondary rounded\">\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Name</th>\r\n           \r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {teamById &&\r\n            teamById.map((element, index) => {\r\n              return (\r\n                <tr key={element.contact_id}>\r\n                  <td>{index + 1}</td>\r\n                  <td>\r\n                    {/* <span\r\n                      onClick={() => {\r\n                        setContactDataTeam(element);\r\n                        setEditTeamEditModal(true);\r\n                      }}\r\n                    >\r\n                      <Icon.Edit2 />\r\n                    </span> */}\r\n                    {element.name}\r\n                  </td>\r\n                  {/* <td>{element.team_title}</td> */}\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table>\r\n      \r\n    </Form>\r\n    \r\n  );\r\n}\r\n","/*eslint-disable*/\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Row, Col, Form, FormGroup, Button, Label, Input, TabContent, TabPane, Nav, NavItem, NavLink,Table  } from 'reactstrap';\r\nimport * as Icon from 'react-feather';\r\nimport { useNavigate, useParams,Link } from 'react-router-dom';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport '../form-editor/editor.scss';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';\r\nimport ComponentCardV2 from '../../components/ComponentCardV2';\r\nimport message from '../../components/Message';\r\nimport api from '../../constants/api';\r\nimport ComponentCard from '../../components/ComponentCard';\r\nimport creationdatetime from '../../constants/creationdatetime';\r\nimport ContactLink from '../../components/Customer/ContactLink';\r\nimport IsoLink from '../../components/Customer/IsoLink';\r\nimport ApplicationLink from '../../components/Customer/ApplicationLink';\r\n\r\nconst CompanyEdit = () => {\r\n  // All state variables\r\n  const [contentDetails, setContentDetails] = useState();\r\n  const [allcountries, setAllCountries] = useState();\r\n\r\n  // Navigation and Parameter Constants\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [teamById, setTeamById] = useState([]);\r\n  const [contactDataTeam, setContactDataTeam] = useState();\r\n  const [addContactModalTeam, setAddContactModalTeam] = useState(false);\r\n  const [addContactModal, setAddContactModal] = useState(false);\r\n  \r\n //All state variable\r\n const [salesReport, setSalesReport] = useState(null);\r\n const [startDate, setStartDate] = useState('');\r\n const [endDate, setEndDate] = useState('');\r\n const [companyName, setCompanyName] = useState('');\r\n const [company, setCompany] = useState();\r\n const [userSearchData, setUserSearchData] = useState('');\r\n\r\n //Get data from Training table\r\n const getProject = () => {\r\n   api\r\n     .post('/score/getGapReportByCompanyId',{company_id:id})\r\n     .then((res) => {\r\n       setSalesReport(res.data.data);\r\n       setUserSearchData(res.data.data);\r\n     })\r\n     .catch(() => {\r\n       message('Over all sales Data Not Found', 'info');\r\n     });\r\n };\r\n\r\n const getCompany = () => {\r\n   api.get('/company/getCompany').then((res) => {\r\n     setCompany(res.data.data);\r\n   });\r\n };\r\n\r\n const handleSearch = () => {\r\n   const newData = salesReport\r\n     .filter((x) =>\r\n       endDate && startDate\r\n         ? x.invoice_date <= (endDate === '' ? x.invoice_date : endDate) &&\r\n           x.invoice_date >= (startDate === '' ? x.invoice_date : startDate)\r\n         : startDate\r\n         ? x.invoice_date === (startDate === '' ? x.invoice_date : startDate)\r\n         : x.invoice_date === (endDate === '' ? x.invoice_date : endDate),\r\n     );\r\n   setUserSearchData(newData);\r\n };\r\n\r\n useEffect(() => {\r\n   getProject();\r\n   getCompany();\r\n }, []);\r\n const [page, setPage] = useState(0);\r\n\r\n const employeesPerPage = 20;\r\n const numberOfEmployeesVistited = page * employeesPerPage;\r\n const displayEmployees = userSearchData.slice(\r\n   numberOfEmployeesVistited,\r\n   numberOfEmployeesVistited + employeesPerPage,\r\n );\r\n const totalPages = Math.ceil(userSearchData.length / employeesPerPage);\r\n const changePage = ({ selected }) => {\r\n   setPage(selected);\r\n };\r\n\r\n \r\n const columns = [\r\n   {\r\n     name: '#',\r\n     selector: '',\r\n     grow: 0,\r\n     wrap: true,\r\n     width: '4%',\r\n   },\r\n   {\r\n     name: 'Edit',\r\n     selector: 'edit',\r\n     cell: () => <Icon.Edit2 />,\r\n     grow: 0,\r\n     width: 'auto',\r\n     button: true,\r\n     sortable: false,\r\n   },\r\n \r\n   {\r\n     name: 'ISO Code',\r\n     selector: 'title',\r\n     sortable: true,\r\n     grow: 0,\r\n   },\r\n   {\r\n     name: 'Score',\r\n     selector: 'first_name',\r\n     sortable: true,\r\n     grow: 0,\r\n     wrap: true,\r\n   },\r\n   {\r\n     name: 'Result',\r\n     selector: 'result',\r\n     sortable: true,\r\n     grow: 2,\r\n     wrap: true,\r\n   },\r\n \r\n   {\r\n    name: 'Review Status',\r\n    selector: 'review_status',\r\n    sortable: true,\r\n    grow: 2,\r\n    wrap: true,\r\n  },\r\n ];\r\n\r\n  // const tabs = [\r\n  //   { id: '1', name: 'Score History' },\r\n  //   { id: '2', name: 'Analytics' },\r\n  // ];\r\n  const [activeTab, setActiveTab] = useState('1');\r\n\r\n  const toggle = (tab) => {\r\n    setActiveTab(tab);\r\n  };\r\n\r\n  const addContactToggle = () => {\r\n    setAddContactModal(!addContactModal);\r\n  };\r\n  // const addContactToggless = () => {\r\n  //   setAddContactModalss(!addContactModalss);\r\n  // };\r\n  const addContactToggleTeam = () => {\r\n    setAddContactModalTeam(!addContactModalTeam);\r\n  };\r\n  //Setting data in contentDetails\r\n  const handleInputs = (e) => {\r\n    setContentDetails({ ...contentDetails, [e.target.name]: e.target.value });\r\n  };\r\n  //setting data in Description Modal contentDetails\r\n  // const getAllCountries = () => {\r\n  //   api\r\n  //     .get('/contact/getCountry')\r\n  //     .then((res) => {\r\n  //       setAllCountries(res.data.data);\r\n  //     })\r\n  //     .catch(() => {\r\n  //       //message('Country Data Not Found', 'info');\r\n  //     });\r\n  // };\r\n //Getting data from milestone\r\n const getTeamById = () => {\r\n  api\r\n    .post('/contact/getContactByCompanyId', { company_id: id })\r\n    .then((res) => {\r\n      setTeamById(res.data.data);\r\n    })\r\n    .catch(() => { });\r\n};\r\n\r\n \r\n  //setting data in Description Modal contentDetails\r\n  const getAllCountries = () => {\r\n    api\r\n      .get('/contact/getCountry')\r\n      .then((res) => {\r\n        setAllCountries(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        //message('Country Data Not Found', 'info');\r\n      });\r\n  };\r\n\r\n  // Get content data By content id\r\n  const getContentById = () => {\r\n    api\r\n      .post('/contact/getCompanyByCompanyId', { company_id: id })\r\n      .then((res) => {\r\n        setContentDetails(res.data.data[0]);\r\n      })\r\n      .catch(() => {\r\n        message('Content Data Not Found', 'info');\r\n      });\r\n  };\r\n  //Edit Content\r\n  const editContentData = () => {\r\n    contentDetails.modification_date = creationdatetime;\r\n    console.log(contentDetails);\r\n    \r\n      api\r\n        .post('/contact/editCompany', contentDetails)\r\n        .then(() => {\r\n          message('Record edited successfully', 'success');\r\n        })\r\n        .catch(() => {\r\n          message('Unable to edit record.', 'error');\r\n        });\r\n    \r\n  };\r\n\r\n  // getting data from Category\r\n \r\n\r\n  useEffect(() => {\r\n    getContentById();\r\n    getAllCountries();\r\n    getTeamById();\r\n  }, [id]);\r\n\r\n  return (\r\n    <>\r\n      <BreadCrumbs heading={contentDetails && contentDetails.title} />\r\n      <Form>\r\n        <FormGroup>\r\n          <ComponentCardV2>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    editContentData();\r\n                    setTimeout(() => {\r\n                      navigate('/Customer');\r\n                    }, 1100);\r\n                  }}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    editContentData();\r\n                  }}\r\n                >\r\n                  Apply\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button\r\n                  color=\"dark\"\r\n                  onClick={() => {\r\n                    navigate('/Company');\r\n                    console.log('back to list');\r\n                  }}\r\n                >\r\n                  Back to List\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </ComponentCardV2>\r\n          {/* Content Details Form */}\r\n          <ComponentCard title=\"Company details\" creationModificationDate={contentDetails}>\r\n            <ToastContainer></ToastContainer>\r\n            <Row>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  <Label> Customer Id </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.company_code}\r\n                    name=\"company_code\"\r\n                    disabled\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                <Label>Name</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.company_name}\r\n                    name=\"company_name\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  {/* Category title from Category table */}\r\n                  <Label>Mobile</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.phone}\r\n                    name=\"phone\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  {/* Category title from Category table */}\r\n                  <Label>Email</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.email}\r\n                    name=\"email\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  {/* Category title from Category table */}\r\n                  <Label>Street</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.address_street}\r\n                    name=\"address_street\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                <Label>State</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.address_state}\r\n                    name=\"address_state\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n              <FormGroup>\r\n              <Label>Country</Label>\r\n              <Input\r\n                type=\"select\"\r\n                name=\"address_country\"\r\n                onChange={handleInputs}\r\n                value={contentDetails && contentDetails.address_country}\r\n              >\r\n                <option defaultValue=\"selected\" value=\"\">\r\n                  Please Select\r\n                </option>\r\n                {allcountries &&\r\n                  allcountries.map((country) => (\r\n                    <option key={country.country_code} value={country.country_code}>\r\n                      {country.name}\r\n                    </option>\r\n                  ))}\r\n              </Input>\r\n            </FormGroup>\r\n          </Col>\r\n                 \r\n            </Row>\r\n          </ComponentCard>\r\n          </FormGroup>\r\n      </Form>\r\n      <ComponentCard title=\"More Details\">\r\n        <Nav tabs>\r\n          {/* <NavItem>\r\n            <NavLink\r\n              className={activeTab === '1' ? 'active' : ''}\r\n              onClick={() => {\r\n                toggle('1');\r\n              }}\r\n            >\r\n              Iso Compliance\r\n            </NavLink>\r\n          </NavItem> */}\r\n          <NavItem>\r\n            <NavLink\r\n              className={activeTab === '2' ? 'active' : ''}\r\n              onClick={() => {\r\n                toggle('2');\r\n              }}\r\n            >  Contacts Linked \r\n              \r\n            </NavLink>\r\n          </NavItem>\r\n          {/* <NavItem>\r\n            <NavLink\r\n              className={activeTab === '3' ? 'active' : ''}\r\n              onClick={() => {\r\n                toggle('3');\r\n              }}\r\n            >\r\n           Applications\r\n            </NavLink>\r\n          </NavItem> */}\r\n          <NavItem>\r\n            <NavLink\r\n              className={activeTab === '4' ? 'active' : ''}\r\n              onClick={() => {\r\n                toggle('4');\r\n              }}\r\n            >\r\n           Reports\r\n            </NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n        <TabContent className=\"p-4\" activeTab={activeTab}>\r\n       \r\n          {/* <TabPane tabId=\"1\">\r\n          <ComponentCard title=\"Iso linked\">\r\n                <IsoLink/>\r\n                </ComponentCard>\r\n          </TabPane> */}\r\n          <TabPane tabId=\"2\">\r\n            <Row>\r\n\r\n<ContactLink\r\n  setContactDataTeam={setContactDataTeam}\r\n  id={id}\r\n  teamById={teamById}\r\n  addContactToggleTeam={addContactToggleTeam}\r\n  addContactModalTeam={addContactModalTeam}\r\n  //setEditTeamEditModal={setEditTeamEditModal}\r\n  getTeamById={getTeamById}\r\n/>\r\n            </Row>\r\n          </TabPane>\r\n          {/* <TabPane tabId=\"3\">\r\n            <Row>\r\n              <ComponentCard title=\"Applications\">\r\n                <ApplicationLink/>\r\n              </ComponentCard>\r\n            </Row>\r\n          </TabPane> */}\r\n          <TabPane tabId=\"4\">\r\n            <Row>\r\n            <Table>\r\n          <thead>\r\n            <tr>\r\n              {columns.map((cell) => {\r\n                return <td key={cell.name}>{cell.name}</td>;\r\n              })}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {displayEmployees &&\r\n              displayEmployees.map((element, index) => {\r\n                return (\r\n                  <tr key={element.gap_report_id}>\r\n                    <td>{index + 1}</td>\r\n                    <td>\r\n                      <Link to={`/GapAnalysisReportEdit/${element.gap_report_id}?tab=1`}>\r\n                        <Icon.Edit2 />\r\n                      </Link>\r\n                    </td>\r\n                   \r\n                    <td>{element.title}</td>\r\n                    <td>{element.correct_count}</td>\r\n                    <td>{element.result}</td>\r\n                    <td>{element.review_status}</td>\r\n                  \r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n          </Table>\r\n            </Row>\r\n          </TabPane>\r\n        </TabContent>\r\n      </ComponentCard>\r\n     \r\n    </>\r\n  );\r\n};\r\nexport default CompanyEdit;\r\n","import moment from \"moment\"\r\n\r\nconst creationdatetime = moment().format('DD-MM-YYYY h:mm:ss a')\r\nexport default creationdatetime \r\n","import { Card, CardBody } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst pStyle = {\r\n  textAlign: 'right',\r\n  marginRight: '10px',\r\n};\r\nconst oStyle={\r\noutline:'none',\r\nborder:'none'\r\n};\r\n\r\nconst ComponentCardV2 = ({ children }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CardBody style={pStyle} >\r\n        <div className=\"btn btn-space text-nowrap shadow-none outline-none\" style={oStyle}>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCardV2.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ComponentCardV2;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Edit2 = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z\"\n  }));\n});\nEdit2.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nEdit2.displayName = 'Edit2';\nexport default Edit2;"],"sourceRoot":""}